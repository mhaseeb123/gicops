/*
 * Copyright (C) 2021  Muhammad Haseeb, and Fahad Saeed
 * Florida International University, Miami, FL
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 */

// CMake generated header file. Do not modify

#pragma once

// Set/Get the bit for modification site in a peptide 
#define MODSITE(x)                       (1 << (x))

// Handle unusued parameters to avoid compiler warnings
#define UNUSED_PARAM(x)              ((void *)(&x))

#define MIN(x,y)                         ((x < y)? x: y)
#define MAX(x,y)                         ((x > y)? x: y)
#define True                             true
#define False                            false

// alias the data types
using status_t = int;
using int_t = int;
using longlong_t = long long;
using short_t = short;
using long_t = long;
using char_t = char;
using VOID = void;
using BOOL = bool;
using bool_t = bool;
using double_t = double;
using string_t = std::string;

// unsigned data types
using uint_t = unsigned int;
using IDX  = unsigned int;
using ID =  unsigned int;
using ulong_t  = unsigned long;
using ull_t = unsigned long long;
using ushort_t = unsigned short;
using uchar_t = unsigned char;
using float_t  = float;

using CHG = unsigned int;
using SLM_SC = unsigned short*;

using AA = char;            // Amino Acid character
using PEAK = double;        // m/z of a fragement (peak)
using intensity_t = double; // Intensity of a fragment (peak)
using SPECTRUM = double*;   // Theoretical Spectrum

using  thread_t = pthread_t;
using  lock_t = sem_t;
